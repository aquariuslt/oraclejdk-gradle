stages:
    - lint
    - build
    - check
    - deploy

image: docker:latest

services:
    - docker:dind

variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    DOCKER_IMAGE: $CI_PROJECT_NAME:$CI_COMMIT_SHA

hadolint:
    stage: lint
    image: hadolint/hadolint:latest-debian
    services: []
    script:
        - hadolint Dockerfile

build:
    stage: build
    script:
        - docker build --pull -t "$DOCKER_IMAGE" .
    after_script:
        - docker save -o "$DOCKER_IMAGE.tar" "$DOCKER_IMAGE"
    artifacts:
        paths:
            - "$DOCKER_IMAGE.tar"

container_scanning:
    stage: check
    allow_failure: true
    only:
        - branches
    before_script:
        - docker load -i "$DOCKER_IMAGE.tar"
    script:
        - docker run -d --name db arminc/clair-db:latest
        - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
        - apk add -q -U wget ca-certificates
        - wget -q -O clair-scanner https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
        - chmod +x clair-scanner
        - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
        - ( retries=0 ; while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; if [ $retries -eq 10 ] ; then echo "Timeout when connecting to clair daemon." >&2 ; exit 1 ; fi ; retries=$(($retries+1)) ; done )
        - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log ${DOCKER_IMAGE} || true
    artifacts:
        when: always
        paths:
            - gl-container-scanning-report.json

.deploy: &deploy
    stage: deploy
    dependencies:
        - build

.registry: &registry
    <<: *deploy
    before_script:
        - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
        - docker load -i "$DOCKER_IMAGE.tar"
    after_script:
        - docker logout $CI_REGISTRY

registry-latest:
    <<: *registry
    only:
        - master
    environment:
        name: GitLab Registry
        url: $CI_PROJECT_URL/container_registry
    script:
        - docker tag "$DOCKER_IMAGE" "$CI_REGISTRY_IMAGE:latest"
        - docker push "$CI_REGISTRY_IMAGE:latest"

registry-tag:
    <<: *registry
    only:
        - tags
    script:
        - docker tag "$DOCKER_IMAGE" "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
        - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"

.hub: &hub
    <<: *deploy
    before_script:
        - echo "$HUB_PASSWORD" | docker login -u "$GITLAB_USER_LOGIN" --password-stdin
        - docker load -i "$DOCKER_IMAGE.tar"
    after_script:
        - docker logout

hub-latest:
    <<: *hub
    only:
        - master
    environment:
        name: Docker Hub
        url: https://hub.docker.com/r/$CI_PROJECT_PATH
    script:
        - docker tag "$DOCKER_IMAGE" "$CI_PROJECT_PATH:latest"
        - docker push "$CI_PROJECT_PATH:latest"

hub-tag:
    <<: *hub
    only:
        - tags
    script:
        - docker tag "$DOCKER_IMAGE" "$CI_PROJECT_PATH:$CI_COMMIT_TAG"
        - docker push "$CI_PROJECT_PATH:$CI_COMMIT_TAG"
